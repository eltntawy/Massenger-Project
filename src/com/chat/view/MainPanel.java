/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.chat.view;

import com.chat.model.Status;
import com.chat.model.User;
import com.chat.view.resource.Resource;
import java.awt.Color;
import java.awt.Component;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.ListCellRenderer;

/**
 *
 * @author eltntawy
 */
public class MainPanel extends javax.swing.JPanel {

    /**
     * Creates new form TempletePanel
     */
    public MainPanel() {
        initComponents();
        initStatusCbBox();
        addSimpleContact();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblUserImage = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        cbBoxUserStatus = new javax.swing.JComboBox();
        contactPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listContact = new javax.swing.JList();
        adPanel = new javax.swing.JPanel();

        setMaximumSize(new java.awt.Dimension(300, 800));
        setMinimumSize(new java.awt.Dimension(300, 800));
        setPreferredSize(new java.awt.Dimension(300, 800));
        setLayout(new java.awt.BorderLayout());

        userPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("User Profile"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Photo"));

        lblUserImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/chat/view/resource/img/messenger.png"))); // NOI18N
        jPanel1.add(lblUserImage);

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jLabel1.setText("User Name");

        cbBoxUserStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Available", "Busy", "Away" }));

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbBoxUserStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                .addContainerGap())
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbBoxUserStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        cbBoxUserStatus.setRenderer(new StatusListCellRender());

        add(userPanel, java.awt.BorderLayout.PAGE_START);

        contactPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contacts"));

        listContact.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listContact);
        listContact.setCellRenderer(new ContactListCellRender());

        javax.swing.GroupLayout contactPanelLayout = new javax.swing.GroupLayout(contactPanel);
        contactPanel.setLayout(contactPanelLayout);
        contactPanelLayout.setHorizontalGroup(
            contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(contactPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addContainerGap())
        );
        contactPanelLayout.setVerticalGroup(
            contactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contactPanelLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 652, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(contactPanel, java.awt.BorderLayout.CENTER);

        javax.swing.GroupLayout adPanelLayout = new javax.swing.GroupLayout(adPanel);
        adPanel.setLayout(adPanelLayout);
        adPanelLayout.setHorizontalGroup(
            adPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        adPanelLayout.setVerticalGroup(
            adPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        add(adPanel, java.awt.BorderLayout.NORTH);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel adPanel;
    private javax.swing.JComboBox cbBoxUserStatus;
    private javax.swing.JPanel contactPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblUserImage;
    private javax.swing.JList listContact;
    private javax.swing.JPanel userPanel;
    // End of variables declaration//GEN-END:variables

    public void addSimpleContact() {
        if (listContact != null) {

            DefaultListModel<User> listModel = new DefaultListModel<User>();
            listModel.addElement(new User("User Name", "Password", "Full Name", Resource.IMAGE_DEFAULT_USER, User.BUSY));
            listModel.addElement(new User("User Name", "Password", "Full Name", Resource.IMAGE_DEFAULT_USER, User.AVAILABLE));
            listModel.addElement(new User("User Name", "Password", "Full Name", Resource.IMAGE_DEFAULT_USER, User.OFFLINE));
            listModel.addElement(new User("User Name", "Password", "Full Name", Resource.IMAGE_DEFAULT_USER, User.AVAILABLE));
            listModel.addElement(new User("User Name", "Password", "Full Name", Resource.IMAGE_DEFAULT_USER, User.AVAILABLE));
            listModel.addElement(new User("User Name", "Password", "Full Name", Resource.IMAGE_DEFAULT_USER, User.AWAY));

            listContact.setModel(listModel);
        }
    }
    
    public void initStatusCbBox() {
        if (cbBoxUserStatus != null) {

            DefaultComboBoxModel<Status> listModel = new DefaultComboBoxModel<Status>();
            listModel.addElement(new Status(Resource.IMAGE_AVAILABLE_SMALL, "Avilable",User.AVAILABLE));
            listModel.addElement(new Status(Resource.IMAGE_AWAY_SMALL, "Away",User.AWAY));
            listModel.addElement(new Status(Resource.IMAGE_BUSY_SMALL, "Busy",User.BUSY));
            listModel.addElement(new Status(Resource.IMAGE_OFFLINE_SMALL, "Offline",User.OFFLINE));

            cbBoxUserStatus.setModel(listModel);
        }
    }

    class ContactListCellRender implements ListCellRenderer<User> {

        @Override
        public Component getListCellRendererComponent(JList<? extends User> list, User value, int index, boolean isSelected, boolean cellHasFocus) {

            ContactPanel contact = new ContactPanel();

            contact.setUserPicture((ImageIcon) lblUserImage.getIcon());
            contact.setName(value.getUserName());
            contact.setUserPicture(value.getUserPicture());

            if (value.getStatus() == User.AVAILABLE) {
                contact.setUserStatusImage(Resource.IMAGE_AVAILABLE);
            } else if (value.getStatus() == User.BUSY) {
                contact.setUserStatusImage(Resource.IMAGE_BUSY);
            } else if (value.getStatus() == User.AWAY) {
                contact.setUserStatusImage(Resource.IMAGE_AWAY);
            } else if (value.getStatus() == User.OFFLINE) {
                contact.setUserStatusImage(Resource.IMAGE_OFFLINE);
            }

            if (isSelected) {
                contact.setBackground(Resource.HIGHLIGHT_COLOR);
            }

            return contact;

        }
    }

    class StatusListCellRender implements ListCellRenderer<Status> {

        @Override
        public Component getListCellRendererComponent(JList<? extends Status> list, Status value, int index, boolean isSelected, boolean cellHasFocus) {

            StatusCellPanel status = new StatusCellPanel();



            if (value.getStatus() == User.AVAILABLE) {
                status.setStatusIcon(Resource.IMAGE_AVAILABLE_SMALL);
                status.setStatusText(value.getStatusText());

            } else if (value.getStatus() == User.BUSY) {
                status.setStatusIcon(Resource.IMAGE_BUSY_SMALL);
                status.setStatusText(value.getStatusText());
            } else if (value.getStatus() == User.AWAY) {
                status.setStatusIcon(Resource.IMAGE_AWAY_SMALL);
                status.setStatusText(value.getStatusText());
            } else if (value.getStatus() == User.OFFLINE) {
                status.setStatusIcon(Resource.IMAGE_OFFLINE_SMALL);
                status.setStatusText(value.getStatusText());
            }

            if (isSelected) {
                status.setBackground(Resource.HIGHLIGHT_COLOR);
            }

            return status;

        }
    }
}
